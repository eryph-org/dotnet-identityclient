// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Eryph.IdentityClient.Models
{
    /// <summary> The ClientSecretType. </summary>
    public readonly partial struct ClientSecretType : IEquatable<ClientSecretType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ClientSecretType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ClientSecretType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RsaPrivateKeyValue = "RsaPrivateKey";
        private const string SharedKeyValue = "SharedKey";

        /// <summary> RsaPrivateKey. </summary>
        public static ClientSecretType RsaPrivateKey { get; } = new ClientSecretType(RsaPrivateKeyValue);
        /// <summary> SharedKey. </summary>
        public static ClientSecretType SharedKey { get; } = new ClientSecretType(SharedKeyValue);
        /// <summary> Determines if two <see cref="ClientSecretType"/> values are the same. </summary>
        public static bool operator ==(ClientSecretType left, ClientSecretType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ClientSecretType"/> values are not the same. </summary>
        public static bool operator !=(ClientSecretType left, ClientSecretType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ClientSecretType"/>. </summary>
        public static implicit operator ClientSecretType(string value) => new ClientSecretType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ClientSecretType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ClientSecretType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
