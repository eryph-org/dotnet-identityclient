// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Eryph.IdentityClient;
using NUnit.Framework;

namespace Eryph.IdentityClient.Samples
{
    public partial class Samples_ClientsClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_ShortVersion()
        {
            ClientsClient client = new ClientsClient();

            using RequestContent content = null;
            Response response = client.Create(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_ShortVersion_Async()
        {
            ClientsClient client = new ClientsClient();

            using RequestContent content = null;
            Response response = await client.CreateAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Create_AllParameters()
        {
            ClientsClient client = new ClientsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                name = "<name>",
                description = "<description>",
                allowedScopes = new object[]
            {
"<allowedScopes>"
            },
            });
            Response response = client.Create(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
            Console.WriteLine(result.GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("keyType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Create_AllParameters_Async()
        {
            ClientsClient client = new ClientsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                name = "<name>",
                description = "<description>",
                allowedScopes = new object[]
            {
"<allowedScopes>"
            },
            });
            Response response = await client.CreateAsync(content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
            Console.WriteLine(result.GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("keyType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_ShortVersion()
        {
            ClientsClient client = new ClientsClient();

            Response response = client.Delete("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_ShortVersion_Async()
        {
            ClientsClient client = new ClientsClient();

            Response response = await client.DeleteAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            ClientsClient client = new ClientsClient();

            Response response = client.Delete("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            ClientsClient client = new ClientsClient();

            Response response = await client.DeleteAsync("<id>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClient_ShortVersion()
        {
            ClientsClient client = new ClientsClient();

            Response response = client.GetClient("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClient_ShortVersion_Async()
        {
            ClientsClient client = new ClientsClient();

            Response response = await client.GetClientAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClient_AllParameters()
        {
            ClientsClient client = new ClientsClient();

            Response response = client.GetClient("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClient_AllParameters_Async()
        {
            ClientsClient client = new ClientsClient();

            Response response = await client.GetClientAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_ShortVersion()
        {
            ClientsClient client = new ClientsClient();

            using RequestContent content = null;
            Response response = client.Update("<id>", content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_ShortVersion_Async()
        {
            ClientsClient client = new ClientsClient();

            using RequestContent content = null;
            Response response = await client.UpdateAsync("<id>", content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Update_AllParameters()
        {
            ClientsClient client = new ClientsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                name = "<name>",
                description = "<description>",
                allowedScopes = new object[]
            {
"<allowedScopes>"
            },
            });
            Response response = client.Update("<id>", content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Update_AllParameters_Async()
        {
            ClientsClient client = new ClientsClient();

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                name = "<name>",
                description = "<description>",
                allowedScopes = new object[]
            {
"<allowedScopes>"
            },
            });
            Response response = await client.UpdateAsync("<id>", content, new ContentType("application/json"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NewKey_ShortVersion()
        {
            ClientsClient client = new ClientsClient();

            Response response = client.NewKey("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NewKey_ShortVersion_Async()
        {
            ClientsClient client = new ClientsClient();

            Response response = await client.NewKeyAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_NewKey_AllParameters()
        {
            ClientsClient client = new ClientsClient();

            Response response = client.NewKey("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
            Console.WriteLine(result.GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("keyType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_NewKey_AllParameters_Async()
        {
            ClientsClient client = new ClientsClient();

            Response response = await client.NewKeyAsync("<id>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
            Console.WriteLine(result.GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("keyType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClients_ShortVersion()
        {
            ClientsClient client = new ClientsClient();

            foreach (BinaryData item in client.GetClients(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClients_ShortVersion_Async()
        {
            ClientsClient client = new ClientsClient();

            await foreach (BinaryData item in client.GetClientsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetClients_AllParameters()
        {
            ClientsClient client = new ClientsClient();

            foreach (BinaryData item in client.GetClients(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetClients_AllParameters_Async()
        {
            ClientsClient client = new ClientsClient();

            await foreach (BinaryData item in client.GetClientsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("allowedScopes")[0].ToString());
            }
        }
    }
}
